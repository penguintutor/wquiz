concepts
---------

Emphasis is on this being in PHP / Ajax
Whilst it would be possible to push more to client side (Javascript handle questions etc) this keeps consistancy. 


Main pages 

index.php
- provides start page (can be bypassed by post directly to page)
- shows details of quiz (after post)
- from details page the next button will be get for non javascript or ajax button if javascript enabled


question.php 
- shows question
- with post saves current answer
	- Note all buttons are now post (forward / backward etc.)
- if in review mode then shows results instead of question

endquiz.php
- checks all questions answered
- clicking on link will reload page with results 


index.php vs offline.php
- Note that at the moment index and offline are completely separate
- This means it needs a separate link to the appropriate page to be added later
- May it be useful to allow tickbox on index.php to redirect to offline.php
	This could be done by either adding GET support and using location or by changing to have a single index.php file pulling in appropriate index.php vs offline.php as appropriate



Templates
----------

Note templates used are header and footer
These are loaded as a regular include
If more need to be included (eg. menu) then these can be included in the header.php file (eg. use headercontainer)
Form buttons are not templated - they should be handled using css if they need to be customised




CSS files
---------

CSS files are not referenced in code.
They need to be included by the site configuration if required
CSS IDs / Classes are prefixed with wquiz-

eg.
wquiz-questionintro
wquiz-questionimage

** - see css-entities.txt for details

** see special case below for details of laying out button positions


Database config file
--------------------

default.cfg - normally points to a file outside of the DOCUMENT_ROOT

the actual config file contains an array

dbtype = database - only mysql is official (mssql is only alternative at moment - untested)
username 
password
hostname
database
tableprefix




Settings
--------

Most settings are optional (defaults in brackets)

review_enable (true)  if false then after last question provide results immediately
review_text - text for do you want to review (html)
review_show_unanswered (true) - show "You have not answered ? questions".

answer_view_enable (true) - allow view of answers after quiz marked
answer_summary_enable (true) - show summary of questions answered correct vs incorrect

quiz_max_questions (1000) max number of questions in a quiz (num within the actual quiz not maximum questions that can be defined which is max size of int - assuming none deleted and readded).



Install script
--------------

Install script should only be required once - it is accessed as a page and will call itself as many times as required until configuration is complete 
It does handle a partial run to permit parts to be done manually (eg. if server doesn't have write access to default.cfg file - or database needs to be created through hosting cpanel)
It will not create new entries if existing is found to prevent this accidently (or maliciously) resetting database settings

It is strict on certain charactors - if other charactors are required then the configuration can be done manually.

Checks performed as follows (note checks are performed prior to asking user confirmation)
* [cfgfile] Does .cfg file exist 
	No - ask details then create
	Yes - move on
* [database] Does database exist 
	No - create and move on
	Yes - "are you sure you want to install into existing" move on
* [tables] Do tables exist
	No - create and move on
	Yes - "are you sure you want to install into existing" move on
* [settings] Do any settings exist
	No - ask for admin password and create default entries (settings etc.)
	Yes - exit - already installed
* [secure] Change database user?
	Allows user in cfg file to be changed - then provides option for moving cfg file outside of document_root

*** First run file
This is in a separate file as we now use standard authentication



Special case - default next button
------------

By default if a user presses enter rather than clicking a button the first submit button (as ordered in the html) is used. As we normally want this to be a later position (eg. previous before next) then this needs to be modified.

Options:
* position next button first and use CSS to re-order buttons (this is preferred method) 
* create a hidden button with value "default" and hide it
* use javascript to capture and handle the enter press 

Implemented using the 2nd, but with option to show or hide the button as required
Button is hidden using a div with class of hidden if following is false
buttons_show_answer_button

Alternative is to set this as true, but hide the div yourself

This method still works without javascript and for screenreaders (who just see the answer button before the navigation buttons)


Added a new database field
--------------------------
audio 
This is for future use (perhaps html5 only version) to allow a audio file to be placed in addition / instead of text. Entry should be a url (same as the way image is used)
There is currently no way of editing this field and it is ignored by the current version

<form action="http://www.google.com/search" method="get">
  <input name="q" size="45" type="Text">

  &nbsp;
  <button id="replacement-1" type="submit">Search with Google</button>
  <!-- <div><button style="display:block" id="replacement-1" type="submit">Search with Google</button></div> -->
</form>

See:
http://www.ampsoft.net/webdesign-l/image-button.html


